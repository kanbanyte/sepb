#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from onrobot_rg_msgs.msg import OnRobotRGInput


class OnRobotRGStatusListener(Node):
    """Initializes the node and subscribe to the OnRobotRGInput topic."""
    def __init__(self):
        super().__init__('OnRobotRGStatusListener')
        self.sub = self.create_subscription(OnRobotRGInput, "OnRobotRGInput", self.printStatus, 10)

    def printStatus(self, status):
        """Prints the status string generated by the statusInterpreter function."""
        self.get_logger().info(self.statusInterpreter(status))

    def statusInterpreter(self, status):
        """Generates a string according to the current value
            of the status variables.
        """

        output = '\n-----\nOnRobot RG status interpreter\n-----\n'

        # g_fof
        output += 'g_fof = ' + str(status.g_fof) + ': '
        output += 'Current fingertip offset: ' + str(status.g_fof / 10.0) + ' mm\n'

        # g_gwd
        output += 'g_gwd = ' + str(status.g_gwd) + ': '
        output += 'Current width between the gripper fingers (w/o offset): ' + \
            str(status.g_gwd / 10.0) + ' mm\n'

        # g_sta
        output += 'g_sta = ' + str(status.g_sta) + ': '
        g_sta16bit = format(status.g_sta, '016b')
        output += '(g_sta (16 bit) = ' + g_sta16bit + '), Currtent states: '
        if int(g_sta16bit[-1]):
            output += ' A motion is ongoing so new commands are not accepted.'
        if int(g_sta16bit[-2]):
            output += ' An internal- or external grip is detected.'
        if int(g_sta16bit[-3]):
            output += ' Safety switch 1 is pushed.'
        if int(g_sta16bit[-4]):
            output += ' Safety circuit 1 is activated so the gripper cannot move.'
        if int(g_sta16bit[-5]):
            output += ' Safety switch 2 is pushed.'
        if int(g_sta16bit[-6]):
            output += ' Safety circuit 2 is activated so the gripper cannot move.'
        if int(g_sta16bit[-7]):
            output += ' Any of the safety switch is pushed.'

        # g_wdf
        output += '\ng_wdf = ' + str(status.g_wdf) + ': '
        output += 'Current width between the gripper fingers (w offset): ' + \
            str(status.g_wdf / 10.0) + ' mm\n'

        return output



def main(args=None):
    rclpy.init(args=args)
    node = OnRobotRGStatusListener()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()

