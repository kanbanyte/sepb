import unittest
from data_processing.chip_position import get_chip_slot_number


class TestChipPosition(unittest.TestCase):

	def test_all_positons(self):
		# Test all positions
		valid_pos = [
			[13, 7, 31, 41],  # 1
                    [11, 10, 31, 44],  # 1
                    [12, 8, 31, 42],  # 1
                    [15, 120, 29, 156],  # 4
                    [12, 121, 29, 155],  # 4
                    [12, 160, 29, 195],  # 5
                    [15, 157, 27, 191],  # 5
                    [10, 197, 28, 235],  # 6
                    [13, 195, 26, 229],  # 6
                    [65, 9, 81, 42],  # 7
                    [65, 46, 82, 81],  # 8
                    [65, 47, 82, 81],  # 8
                    [62, 80, 80, 117],  # 9
                    [65, 122, 83, 155],  # 10
                    [65, 159, 78, 192],  # 11
                    [65, 195, 79, 230],  # 12
                    [118, 4, 129, 44],  # 13
                    [109, 121, 129, 158],  # 16
                    [113, 121, 129, 153],  # 16
                    [110, 160, 128, 196],  # 17
                    [113, 157, 128, 190],  # 17
                    [169, 10, 183, 49],  # 19
                    [168, 47, 182, 79],  # 20
                    [168, 47, 182, 79],  # 20
                    [169, 49, 179, 79],  # 20
                    [167, 84, 180, 117],  # 21
                    [165, 121, 182, 156],  # 22
                    [167, 195, 181, 232],  # 24
                    [161, 161, 179, 197],  # 23
                    [165, 158, 180, 191],  # 23
                    [164, 201, 180, 235],  # 24
                    [267, 3, 283, 45],  # 31
                    [267, 3, 283, 45],  # 31
                    [267, 10, 285, 50],  # 31
                    [267, 10, 285, 50],  # 31
                    [267, 46, 283, 81],  # 32
                    [267, 46, 283, 81],  # 32
                    [268, 51, 285, 87],  # 32
                    [267, 46, 283, 81],  # 32
                    [265, 83, 284, 118],  # 33
                    [267, 87, 286, 123],  # 33
                    [267, 87, 286, 123],  # 33
                    [267, 87, 286, 123],  # 33
                    [267, 87, 286, 123],  # 33
                    [267, 125, 285, 161],  # 34
                    [267, 125, 285, 161],  # 34
                    [267, 125, 285, 161],  # 34
                    [267, 125, 285, 161],  # 34
                    [267, 161, 285, 198],  # 35
                    [268, 155, 285, 193],  # 35
                    [269, 155, 285, 193],  # 35
                    [267, 161, 285, 198],  # 35
                    [267, 161, 285, 198],  # 35
                    [267, 161, 285, 198],  # 35
                    [317, 2, 334, 43],  # 37
                    [317, 2, 334, 43],  # 37
                    [318, 8, 336, 48],  # 37
                    [318, 8, 336, 48],  # 37
                    [317, 44, 334, 81],  # 38
                    [318, 49, 335, 86],  # 38
                    [317, 44, 334, 81],  # 38
                    [318, 49, 335, 86],  # 38
                    [315, 86, 335, 122],  # 39
                    [317, 119, 334, 155],  # 40
                    [317, 119, 334, 155],  # 40
                    [317, 156, 331, 193],  # 41
                    [318, 160, 337, 193],  # 41
                    [317, 156, 331, 193],  # 41
                    [318, 160, 337, 193],  # 41
                    [318, 161, 335, 197],  # 41
                    [318, 161, 335, 197],  # 41
                    [368, 8, 385, 49],  # 43
                    [367, 2, 385, 44],  # 43
                    [367, 2, 385, 44],  # 43
                    [368, 8, 385, 49],  # 43
                    [367, 45, 384, 80],  # 44
                    [367, 45, 384, 80],  # 44
                    [367, 83, 384, 117],  # 45
                    [367, 83, 384, 117],  # 45
                    [369, 123, 385, 159],  # 46
                    [368, 118, 384, 154],  # 46
                    [368, 118, 384, 154],  # 46
                    [369, 123, 385, 159],  # 46
                    [368, 153, 387, 193],  # 47
                    [368, 154, 387, 192],  # 47
                    [369, 159, 385, 196]  # 47
                    [368, 154, 387, 192],  # 47
                    [368, 153, 387, 193],  # 47
                    [369, 159, 385, 196],  # 47


		]
		for i, bounding_box in enumerate(valid_pos):
			print(f"Testing position {i + 1}")
			print(f"position: {get_chip_slot_number(bounding_box)}")

if __name__ == '__main__':
    unittest.main()
